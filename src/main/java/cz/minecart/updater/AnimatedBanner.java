package cz.minecart.updater;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import javax.swing.ImageIcon;

/**
 * Minecart animated logo.
 *
 * @author Minecart team
 */
public class AnimatedBanner extends javax.swing.JPanel {

    private final ImageIcon bgImage = new javax.swing.ImageIcon(getClass().getResource("/cz/minecart/updater/resources/images/header_bg.jpg"));
    private final ImageIcon logoImage = new javax.swing.ImageIcon(getClass().getResource("/cz/minecart/updater/resources/images/minecart-overlay.png"));

    private BufferedImage animationBuffer;

    private final ImageObserver observer = new ImageObserver() {
        @Override
        public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
            return true;
        }
    };

    // Cached values
    private int bgWidth = 0;
    private int bgHeight = 0;

    private Font logoFont = null;
    private final String logoText = "MINECART RELOADED";
    private int logoWidth = 0;

    private String versionText = "Version";
    private int versionWidth;

    private boolean bgDirectionUp = false;
    private int bgY = 70;

    public AnimatedBanner() {
        bgWidth = bgImage.getIconWidth();
        bgHeight = bgImage.getIconHeight();

        initComponents();
        init();
    }

    private void init() {
        setMinimumSize(new Dimension(800, 170));
        setPreferredSize(new Dimension(800, 170));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void invalidate() {
        animationBuffer = null;
        updateBuffer();
        super.invalidate();
    }

    @Override
    protected void paintComponent(Graphics g) {
        if (animationBuffer != null) {
            g.drawImage(animationBuffer, 0, 0, this);
        }
    }

    protected void updateBuffer() {
        int width = getWidth();
        int height = getHeight();
        if (width > 0 && height > 0) {
            if (animationBuffer == null) {
                animationBuffer = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
                Graphics2D g = animationBuffer.createGraphics();

                int panelWidth = width;
                int startPoint = (panelWidth - bgWidth) / 2;
                g.setColor(Color.BLACK);
                g.fillRect(0, 0, width, height);
                g.drawImage(bgImage.getImage(), startPoint, -bgY, observer);
                g.setColor(Color.WHITE);

                if (versionWidth == 0) {
                    FontMetrics metrics = g.getFontMetrics(g.getFont());
                    versionWidth = metrics.stringWidth(versionText);
                }

                ((Graphics2D) g).setRenderingHint(
                        RenderingHints.KEY_TEXT_ANTIALIASING,
                        RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB);
                g.drawString(versionText, startPoint + bgWidth - versionWidth - 15, 160);
                if (logoFont == null) {
                    logoFont = new Font("Dialog", 0, 44);
                    FontMetrics metrics = g.getFontMetrics(logoFont);
                    logoWidth = metrics.stringWidth(logoText);
                }
                g.setFont(logoFont);
                g.setColor(Color.BLACK);
                g.drawString(logoText, startPoint + 247, 97);
                g.fillRect(startPoint + 247, 107, logoWidth, 3);
                g.setColor(new Color(240, 240, 240));
                g.drawString(logoText, startPoint + 245, 95);
                g.fillRect(startPoint + 245, 105, logoWidth, 3);
                g.drawImage(logoImage.getImage(), startPoint + 12, 12, observer);
                g.dispose();
            }
        }
    }

    public void setVersion(String version) {
        this.versionText = version;
        versionWidth = 0;
    }

    public void animate() {
        if (bgDirectionUp) {
            if (bgY > 1) {
                bgY--;
            } else {
                bgY = 0;
                bgDirectionUp = false;
            }
        } else {
            if (bgY < bgHeight - 171) {
                bgY++;
            } else {
                bgY = bgHeight - 170;
                bgDirectionUp = true;
            }
        }

        invalidate();
        repaint();
    }
}
